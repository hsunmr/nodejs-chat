#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-chat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '6555');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// socket.io
const { Server } = require("socket.io");
const io = new Server(server);

let connection_count = 0;
io.on('connection', (socket) => {
  let added_user = false;

  // add user count when user input name
  socket.on('add user', (data) => {
    if (added_user) return;

    added_user = true;
    socket.username = data.name;
    socket.user_color = data.user_color;
    connection_count++;

    socket.emit('login', connection_count);
    socket.broadcast.emit('refresh count', connection_count);
  });

  // send message to client
  socket.on('send message', (msg) => {
    socket.broadcast.emit('show message', {
      name      : socket.username,
      msg       : msg,
      user_color: socket.user_color
    });
  });

  // disconnect subtract connection count
  socket.on('disconnect', () => {
    if (added_user) {
      socket.broadcast.emit('refresh count', --connection_count);
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
